<?php

namespace s9e\TextFormatter\Tests;

use PHPUnit_Framework_TestCase;
use s9e\Acl\BitPacker;

/**
* @covers s9e\Acl\BitPacker
*/
class BitPackerTest extends PHPUnit_Framework_TestCase
{
	/**
	* @dataProvider getMergeTests
	*/
	public function testMerge($strings, $expected)
	{
		$packer = new BitPacker;
		$actual = $packer->merge($strings);
		$this->assertSame($expected, $actual);

		foreach ($strings as $string)
		{
			$this->assertContains($string, $actual);
		}
	}

	public function getMergeTests()
	{
		return [
			[
				['10000', '01001'],
				'100001001'
			],
			[
				['1111', '0000'],
				'11110000'
			],
			[
				['11110', '11000', '11100'],
				'1111000'
			],
			[
				['011', '011111', '11100'],
				'01111100'
			],
			[
				['11010', '10101', '01010', '10100'],
				'11010100'
			],
			[
				// This test doesn't target any specific code path. It just merges 2048 strings
				// (1536 unique strings) that are between 1 and 10 characters long. It ensures that
				// things don't go haywire when we try to merge many strings
				array_merge(
					array_map('decbin', range(0, 1023)),
					array_map(
						function ($i)
						{
							return sprintf('%010b', $i);
						},
						range(0, 1023)
					)
				),
				
			],
		];
	}

	/**
	* @dataProvider getToBinTests
	*/
	public function testToBin($string, $expected)
	{
		$this->assertSame($expected, BitPacker::toBin($string));
	}

	public function getToBinTests()
	{
		return [
			[
				'0',
				"\0"
			],
			[
				'1',
				"\1",
			],
			[
				'10000000',
				"\1"
			],
			[
				'1000000010000000',
				"\1\1"
			],
			[
				'00000001000000011',
				"\x80\x80\1"
			],
		];
	}
}